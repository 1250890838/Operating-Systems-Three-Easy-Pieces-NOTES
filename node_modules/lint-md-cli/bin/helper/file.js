"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var fs = require('fs');

var path = require('path');

var glob = require('glob');

var isFile = function isFile(path) {
  return fs.statSync(path).isFile();
};

var isDirectory = function isDirectory(path) {
  return fs.statSync(path).isDirectory();
};
/**
 * 读取所有文件
 * @param src
 * @param config
 * @returns {Promise<any>}
 */


module.exports = function (src, config) {
  var excludeFiles = config.excludeFiles;
  return new Promise(function (resolve, reject) {
    setTimeout(function () {
      var files = [];
      var srcArr = [];

      for (var i = 0; i < src.length; i++) {
        srcArr.push.apply(srcArr, _toConsumableArray(glob.sync(src[i])));
      }

      for (var _i = 0; _i < srcArr.length; _i++) {
        var f = [];
        var p = path.resolve(srcArr[_i]);

        if (isDirectory(p)) {
          f = glob.sync("".concat(p, "/**/*.{md,markdown}"), {
            ignore: excludeFiles
          });
        } else if (isFile(p)) {
          f = glob.sync("".concat(p), {
            ignore: excludeFiles
          });
        }

        files.push.apply(files, _toConsumableArray(f));
      }

      resolve(files);
    }, 0);
  });
};